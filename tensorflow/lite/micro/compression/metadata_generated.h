// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_METADATA_TFLITE_MICRO_COMPRESSION_H_
#define FLATBUFFERS_GENERATED_METADATA_TFLITE_MICRO_COMPRESSION_H_

#include "flatbuffers/flatbuffers.h"

namespace tflite {
namespace micro {
namespace compression {

struct Metadata;
struct MetadataBuilder;

struct LutTensor;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) LutTensor FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t subgraph_;
  uint16_t tensor_;
  uint8_t index_bitwidth_;
  int8_t padding0__;
  uint16_t index_buffer_;
  uint16_t value_buffer_;

 public:
  LutTensor()
      : subgraph_(0),
        tensor_(0),
        index_bitwidth_(0),
        padding0__(0),
        index_buffer_(0),
        value_buffer_(0) {
    (void)padding0__;
  }
  LutTensor(uint16_t _subgraph, uint16_t _tensor, uint8_t _index_bitwidth, uint16_t _index_buffer, uint16_t _value_buffer)
      : subgraph_(flatbuffers::EndianScalar(_subgraph)),
        tensor_(flatbuffers::EndianScalar(_tensor)),
        index_bitwidth_(flatbuffers::EndianScalar(_index_bitwidth)),
        padding0__(0),
        index_buffer_(flatbuffers::EndianScalar(_index_buffer)),
        value_buffer_(flatbuffers::EndianScalar(_value_buffer)) {
  }
  uint16_t subgraph() const {
    return flatbuffers::EndianScalar(subgraph_);
  }
  uint16_t tensor() const {
    return flatbuffers::EndianScalar(tensor_);
  }
  uint8_t index_bitwidth() const {
    return flatbuffers::EndianScalar(index_bitwidth_);
  }
  uint16_t index_buffer() const {
    return flatbuffers::EndianScalar(index_buffer_);
  }
  uint16_t value_buffer() const {
    return flatbuffers::EndianScalar(value_buffer_);
  }
};
FLATBUFFERS_STRUCT_END(LutTensor, 10);

struct Metadata FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MetadataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LUT_TENSORS = 4
  };
  const flatbuffers::Vector<const tflite::micro::compression::LutTensor *> *lut_tensors() const {
    return GetPointer<const flatbuffers::Vector<const tflite::micro::compression::LutTensor *> *>(VT_LUT_TENSORS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LUT_TENSORS) &&
           verifier.VerifyVector(lut_tensors()) &&
           verifier.EndTable();
  }
};

struct MetadataBuilder {
  typedef Metadata Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_lut_tensors(flatbuffers::Offset<flatbuffers::Vector<const tflite::micro::compression::LutTensor *>> lut_tensors) {
    fbb_.AddOffset(Metadata::VT_LUT_TENSORS, lut_tensors);
  }
  explicit MetadataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Metadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Metadata>(end);
    return o;
  }
};

inline flatbuffers::Offset<Metadata> CreateMetadata(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const tflite::micro::compression::LutTensor *>> lut_tensors = 0) {
  MetadataBuilder builder_(_fbb);
  builder_.add_lut_tensors(lut_tensors);
  return builder_.Finish();
}

inline flatbuffers::Offset<Metadata> CreateMetadataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<tflite::micro::compression::LutTensor> *lut_tensors = nullptr) {
  auto lut_tensors__ = lut_tensors ? _fbb.CreateVectorOfStructs<tflite::micro::compression::LutTensor>(*lut_tensors) : 0;
  return tflite::micro::compression::CreateMetadata(
      _fbb,
      lut_tensors__);
}

inline const tflite::micro::compression::Metadata *GetMetadata(const void *buf) {
  return flatbuffers::GetRoot<tflite::micro::compression::Metadata>(buf);
}

inline const tflite::micro::compression::Metadata *GetSizePrefixedMetadata(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tflite::micro::compression::Metadata>(buf);
}

inline bool VerifyMetadataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tflite::micro::compression::Metadata>(nullptr);
}

inline bool VerifySizePrefixedMetadataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tflite::micro::compression::Metadata>(nullptr);
}

inline void FinishMetadataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tflite::micro::compression::Metadata> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMetadataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tflite::micro::compression::Metadata> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace compression
}  // namespace micro
}  // namespace tflite

#endif  // FLATBUFFERS_GENERATED_METADATA_TFLITE_MICRO_COMPRESSION_H_

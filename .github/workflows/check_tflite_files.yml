name: Check TfLite Files
on:
  workflow_run:
    workflows: [Tests Entry Point]
    types:
      - completed

jobs:
  check_tflite_files:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion=='success'
    name: Check PR Modifies TfLite Files
    steps:
      - name: local-sha
        if: ${{ !(github.event.workflow_run.conclusion=='success') }}
        run: |
          echo "JOB_SHA=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
      - name: archived-sha
        if: github.event.workflow_run.conclusion=='success'
        uses: actions/github-script@v6
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "sha"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/sha.zip', Buffer.from(download.data));
      - name: unzip-sha
        if: github.event.workflow_run.conclusion=='success'
        run: |
          unzip sha.zip
          echo "JOB_SHA=$(cat prsha)" >> $GITHUB_ENV
          echo "CHECK_FILES_SKIP=$(cat tf_files)" >> $GITHUB_ENV
      - name: checkout-repo
        uses: actions/checkout@v3.1.0
        with:
          ref: ${{ env.JOB_SHA }}

      - name: Check Files
        if: env.CHECK_FILES_SKIP == 'FALSE'
        run: |
          URL="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files"
          PR_FILES=$(curl -s -X GET -H "Authorization: Bearer ${{ secrets.TFLM_BOT_REPO_TOKEN }}" $URL | jq -r '.[] | .filename')
          rm -rf tmp_pull_request_files.txt
          echo "${PR_FILES}" >> tmp_pull_request_files.txt
          rm -rf .git
          echo ${{ secrets.TFLM_BOT_PACKAGE_READ_TOKEN }} | docker login ghcr.io -u tflm-bot --password-stdin
          docker run --rm -v `pwd`:/tflite-micro -w /tflite-micro ghcr.io/tflm-bot/tflm-ci:latest python3 ci/check_tflite_files.py tmp_pull_request_files.txt
          TFLITE_FILE_TEST_STATUS=$?
          rm -f tmp_pull_request_files.txt
          exit ${TFLITE_FILE_TEST_STATUS}

# YAML schema for GitHub Actions:
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions
#
# Helpful YAML parser to clarify YAML syntax:
# https://yaml-online-parser.appspot.com/

name: Xtensa

# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onschedule
on:
  workflow_run:
    workflows: [Tests Entry Point]
    types:
      - completed

  schedule:
    # 10am UTC is 3am or 4am PT depending on daylight savings.
    - cron: '0 10 * * *'

  # Allow manually triggering of the workflow.
  workflow_dispatch: {}

jobs:
  f1_unit_tests:
    runs-on: ubuntu-latest

    if: |
      github.event.workflow_run.conclusion=='success' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'schedule' && github.repository == 'tensorflow/tflite-micro')

    name: Fusion F1 Unit Tests (presubmit)
    steps:
      - name: local-sha
        if: ${{ !(github.event.workflow_run.conclusion=='success') }}
        run: |
          echo "JOB_SHA=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
      - name: archived-sha
        if: github.event.workflow_run.conclusion=='success'
        uses: actions/github-script@v6
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "sha"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/sha.zip', Buffer.from(download.data));
      - name: unzip-sha
        if: github.event.workflow_run.conclusion=='success'
        run: |
          unzip sha.zip
          echo "JOB_SHA=$(cat prsha)" >> $GITHUB_ENV
      - name: checkout-repo
        uses: actions/checkout@v3.1.0
        with:
          ref: ${{ env.JOB_SHA }}

      - run: |
          rm -rf .git
          echo ${{ secrets.TFLM_BOT_PACKAGE_READ_TOKEN }} | docker login ghcr.io -u tflm-bot --password-stdin
          docker run --rm -v `pwd`:/opt/tflite-micro ghcr.io/tflm-bot/xtensa:0.1 \
          /bin/bash -c \
          "cd /opt && tflite-micro/tensorflow/lite/micro/tools/ci_build/test_xtensa_fusion_f1.sh EXTERNAL tflite-micro/"

  hifi5_unit_tests:
    runs-on: ubuntu-latest

    if: |
      github.event.workflow_run.conclusion=='success' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'schedule' && github.repository == 'tensorflow/tflite-micro')
    name: Hifi5 Unit Tests (presubmit)
    steps:
      - name: local-sha
        if: ${{ !(github.event.workflow_run.conclusion=='success') }}
        run: |
          echo "JOB_SHA=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
      - name: archived-sha
        if: github.event.workflow_run.conclusion=='success'
        uses: actions/github-script@v6
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "sha"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/sha.zip', Buffer.from(download.data));
      - name: unzip-sha
        if: github.event.workflow_run.conclusion=='success'
        run: |
          unzip sha.zip
          echo "JOB_SHA=$(cat prsha)" >> $GITHUB_ENV
      - name: checkout-repo
        uses: actions/checkout@v3.1.0
        with:
          ref: ${{ env.JOB_SHA }}
          
      - run: |
          rm -rf .git
          echo ${{ secrets.TFLM_BOT_PACKAGE_READ_TOKEN }} | docker login ghcr.io -u tflm-bot --password-stdin
          docker run --rm -v `pwd`:/opt/tflite-micro ghcr.io/tflm-bot/xtensa:0.1 \
          /bin/bash -c \
          "cd /opt && tflite-micro/tensorflow/lite/micro/tools/ci_build/test_xtensa_hifi5.sh tflite-micro/"

  vision_p6_presubmit:
    runs-on: ubuntu-latest

    if: |
      github.event.workflow_run.conclusion=='success' ||
      github.event_name == 'workflow_dispatch'
    name: Vision P6 Build (presubmit)
    steps:
      - name: local-sha
        if: ${{ !(github.event.workflow_run.conclusion=='success') }}
        run: |
          echo "JOB_SHA=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
      - name: archived-sha
        if: github.event.workflow_run.conclusion=='success'
        uses: actions/github-script@v6
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "sha"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/sha.zip', Buffer.from(download.data));
      - name: unzip-sha
        if: github.event.workflow_run.conclusion=='success'
        run: |
          unzip sha.zip
          echo "JOB_SHA=$(cat prsha)" >> $GITHUB_ENV
      - name: checkout-repo
        uses: actions/checkout@v3.1.0
        with:
          ref: ${{ env.JOB_SHA }}

      - run: |
          rm -rf .git
          echo ${{ secrets.TFLM_BOT_PACKAGE_READ_TOKEN }} | docker login ghcr.io -u tflm-bot --password-stdin
          docker run --rm -v `pwd`:/opt/tflite-micro ghcr.io/tflm-bot/xtensa:0.1 \
          /bin/bash -c \
          "cd /opt && tflite-micro/tensorflow/lite/micro/tools/ci_build/test_xtensa_vision_p6.sh RUN_NO_TESTS tflite-micro/"

  vision_p6_unit_tests:
    runs-on: ubuntu-latest

    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'schedule' && github.repository == 'tensorflow/tflite-micro')

    name: Vision P6 Unit Tests (nightly)
    steps:
      - name: local-sha
        if: ${{ !(github.event.workflow_run.conclusion=='success') }}
        run: |
          echo "JOB_SHA=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
      - name: archived-sha
        if: github.event.workflow_run.conclusion=='success'
        uses: actions/github-script@v6
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "sha"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/sha.zip', Buffer.from(download.data));
      - name: unzip-sha
        if: github.event.workflow_run.conclusion=='success'
        run: |
          unzip sha.zip
          echo "JOB_SHA=$(cat prsha)" >> $GITHUB_ENV
      - name: checkout-repo
        uses: actions/checkout@v3.1.0
        with:
          ref: ${{ env.JOB_SHA }}

      - run: |
          rm -rf .git
          echo ${{ secrets.TFLM_BOT_PACKAGE_READ_TOKEN }} | docker login ghcr.io -u tflm-bot --password-stdin
          docker run --rm -v `pwd`:/opt/tflite-micro ghcr.io/tflm-bot/xtensa:0.1 \
          /bin/bash -c \
          "cd /opt && tflite-micro/tensorflow/lite/micro/tools/ci_build/test_xtensa_vision_p6.sh RUN_TESTS tflite-micro/"

  hifi_3z_unit_tests:
    runs-on: ubuntu-latest

    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'schedule' && github.repository == 'tensorflow/tflite-micro')

    name: Hifi3z Unit Tests (nightly regression)
    steps:
      - name: local-sha
        if: ${{ !(github.event.workflow_run.conclusion=='success') }}
        run: |
          echo "JOB_SHA=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
      - name: archived-sha
        if: github.event.workflow_run.conclusion=='success'
        uses: actions/github-script@v6
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "sha"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/sha.zip', Buffer.from(download.data));
      - name: unzip-sha
        if: github.event.workflow_run.conclusion=='success'
        run: |
          unzip sha.zip
          echo "JOB_SHA=$(cat prsha)" >> $GITHUB_ENV
      - name: checkout-repo
        uses: actions/checkout@v3.1.0
        with:
          ref: ${{ env.JOB_SHA }}
      - run: |
          rm -rf .git
          echo ${{ secrets.TFLM_BOT_PACKAGE_READ_TOKEN }} | docker login ghcr.io -u tflm-bot --password-stdin
          docker run --rm -v `pwd`:/opt/tflite-micro ghcr.io/tflm-bot/xtensa:0.1 \
          /bin/bash -c \
          "cd /opt && tflite-micro/tensorflow/lite/micro/tools/ci_build/test_xtensa_hifi3z.sh EXTERNAL tflite-micro/"


# YAML schema for GitHub Actions:
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions
#
# Helpful YAML parser to clarify YAML syntax:
# https://yaml-online-parser.appspot.com/
#
#
# This file contains the workflows that are run prior to merging a pull request.

name: CI

on:
  workflow_run:
    workflows: [Tests Entry Point]
    types:
      - completed

  schedule:
    # 10am UTC is 3am or 4am PT depending on daylight savings.
    - cron: '0 10 * * *'

  # Allow manually triggering of the workflow.
  workflow_dispatch: {}

jobs:
  bazel_tests:
    runs-on: ubuntu-latest

    if: |
      github.event.workflow_run.conclusion=='success' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'schedule' && github.repository == 'tensorflow/tflite-micro')

    name: Bazel (presubmit)
    steps:
      - name: local-sha
        if: ${{ !(github.event.workflow_run.conclusion=='success') }}
        run: |
          echo "JOB_SHA=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
      - name: archived-sha
        if: github.event.workflow_run.conclusion=='success'
        uses: actions/github-script@v6
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "sha"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/sha.zip', Buffer.from(download.data));
      - name: unzip-sha
        if: github.event.workflow_run.conclusion=='success'
        run: |
          unzip sha.zip
          echo "JOB_SHA=$(cat prsha)" >> $GITHUB_ENV
      - name: checkout-repo
        uses: actions/checkout@v3.1.0
        with:
          ref: ${{ env.JOB_SHA }}

      - name: Install dependencies
        run: |
          sudo ci/install_bazel.sh
          pip3 install Pillow
          pip3 install Wave
          export PYTHON_BIN_PATH=$(which python)
          sudo apt install -y python-numpy
      - name: Test
        run: |
          tensorflow/lite/micro/tools/ci_build/test_bazel.sh

  cortex_m_tests:
    runs-on: ubuntu-latest

    if: |
      github.event.workflow_run.conclusion=='success' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'schedule' && github.repository == 'tensorflow/tflite-micro')
    name: Cortex-M (presubmit)
    steps:
      - name: local-sha
        if: ${{ !(github.event.workflow_run.conclusion=='success') }}
        run: |
          echo "JOB_SHA=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
      - name: archived-sha
        if: github.event.workflow_run.conclusion=='success'
        uses: actions/github-script@v6
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "sha"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/sha.zip', Buffer.from(download.data));
      - name: unzip-sha
        if: github.event.workflow_run.conclusion=='success'
        run: |
          unzip sha.zip
          echo "JOB_SHA=$(cat prsha)" >> $GITHUB_ENV
      - name: checkout-repo
        uses: actions/checkout@v3.1.0
        with:
          ref: ${{ env.JOB_SHA }}
      - name: Install dependencies
        run: |
          pip3 install Pillow
          pip3 install Wave
      - name: Test
        run: |
          cd ../
          tflite-micro/tensorflow/lite/micro/tools/ci_build/test_bluepill.sh tflite-micro/
          tflite-micro/tensorflow/lite/micro/tools/ci_build/test_stm32f4.sh tflite-micro/

  check_code_style:
    runs-on: ubuntu-latest

    if: |
      github.event.workflow_run.conclusion=='success' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'schedule' && github.repository == 'tensorflow/tflite-micro')

    name: Code Style (presubmit)
    steps:
      - name: local-sha
        if: ${{ !(github.event.workflow_run.conclusion=='success') }}
        run: |
          echo "JOB_SHA=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
      - name: archived-sha
        if: github.event.workflow_run.conclusion=='success'
        uses: actions/github-script@v6
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "sha"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/sha.zip', Buffer.from(download.data));
      - name: unzip-sha
        if: github.event.workflow_run.conclusion=='success'
        run: |
          unzip sha.zip
          echo "JOB_SHA=$(cat prsha)" >> $GITHUB_ENV
      - name: checkout-repo
        uses: actions/checkout@v3.1.0
        with:
          ref: ${{ env.JOB_SHA }}
      - name: Check
        uses: docker://ghcr.io/tflm-bot/tflm-ci:latest
        with:
          args: /bin/sh -c "tensorflow/lite/micro/tools/ci_build/test_code_style.sh"

  project_generation:
    runs-on: ubuntu-latest

    if: |
      github.event.workflow_run.conclusion=='success' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'schedule' && github.repository == 'tensorflow/tflite-micro')

    name: Project Generation (presubmit)
    steps:
      - name: local-sha
        if: ${{ !(github.event.workflow_run.conclusion=='success') }}
        run: |
          echo "JOB_SHA=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
      - name: archived-sha
        if: github.event.workflow_run.conclusion=='success'
        uses: actions/github-script@v6
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "sha"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/sha.zip', Buffer.from(download.data));
      - name: unzip-sha
        if: github.event.workflow_run.conclusion=='success'
        run: |
          unzip sha.zip
          echo "JOB_SHA=$(cat prsha)" >> $GITHUB_ENV
      - name: checkout-repo
        uses: actions/checkout@v3.1.0
        with:
          ref: ${{ env.JOB_SHA }}
      - name: Install dependencies
        run: |
          pip3 install Pillow
          pip3 install Wave
      - name: Test
        run: |
          cd ../
          tflite-micro/tensorflow/lite/micro/tools/ci_build/test_project_generation.sh tflite-micro/

  x86_tests:
    runs-on: ubuntu-latest

    if: |
      github.event.workflow_run.conclusion=='success' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'schedule' && github.repository == 'tensorflow/tflite-micro')

    name: Makefile x86 (presubmit)
    steps:
      - name: local-sha
        if: ${{ !(github.event.workflow_run.conclusion=='success') }}
        run: |
          echo "JOB_SHA=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
      - name: archived-sha
        if: github.event.workflow_run.conclusion=='success'
        uses: actions/github-script@v6
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "sha"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/sha.zip', Buffer.from(download.data));
      - name: unzip-sha
        if: github.event.workflow_run.conclusion=='success'
        run: |
          unzip sha.zip
          echo "JOB_SHA=$(cat prsha)" >> $GITHUB_ENV
      - name: checkout-repo
        uses: actions/checkout@v3.1.0
        with:
          ref: ${{ env.JOB_SHA }}
      - name: Install dependencies
        run: |
          pip3 install Pillow
          pip3 install Wave
      - name: Test
        run: |
          tensorflow/lite/micro/tools/ci_build/test_makefile.sh
          cd ../
          tflite-micro/tensorflow/lite/micro/tools/ci_build/test_x86.sh tflite-micro/

